// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorComfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Logging {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  event     String
  reference String
  message   String?
  createdAt DateTime @default(now())
}

enum PaymentPlan {
  BASIC
  POPULAR
  GOLDEN
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorComfirmation?
  role                  UserRole               @default(USER)

  invitationCode String?
  payment        Payment?
  paymentPlan    PaymentPlan?

  referrals    Referral[] @relation("ReferrerReferrals")
  referredBy   Referral?  @relation("ReferredUser")
  referredById String?    @db.ObjectId

  earnings             Float           @default(0.0)
  withdrawableEarnings Float           @default(0.0)
  referralCountGen     ReferralCount[]
  referralCount        Int             @default(0)

  bankDetails BankDetails?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  amount    Float
  reference String
  method    String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId])
}

model Referral {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  referrerId String @db.ObjectId
  referrer   User   @relation("ReferrerReferrals", fields: [referrerId], references: [id], onDelete: Cascade)

  referredId String @unique @db.ObjectId
  referred   User   @relation("ReferredUser", fields: [referredId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([referrerId, referredId])
  @@index([referrerId])
}

model EarningHistory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  payerId    String
  receiverId String
  amount     Float

  createdAt DateTime @default(now())
}

model ReferralCount {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  generation Int
  count      Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, generation])
}

model BankDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  accountName   String
  accountNumber String
  bankName      String
  bankCode      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}
